<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>En Php Widgets Wordpress on nabito.net</title>
    <link>https://ozzyczech.github.io/nabito.net/tags/en-php-widgets-wordpress/</link>
    <description>Recent content in En Php Widgets Wordpress on nabito.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cs-cz</language>
    <managingEditor>ozana@omdesign.cz (Roman Ožana)</managingEditor>
    <webMaster>ozana@omdesign.cz (Roman Ožana)</webMaster>
    <lastBuildDate>Tue, 29 Jan 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://ozzyczech.github.io/nabito.net/tags/en-php-widgets-wordpress/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Wordpress - register and setup witgets from PHP code</title>
      <link>https://ozzyczech.github.io/nabito.net/wordpress/wordpress-register-and-setup-witgets-from-php-code/</link>
      <pubDate>Tue, 29 Jan 2013 00:00:00 +0000</pubDate>
      <author>ozana@omdesign.cz (Roman Ožana)</author>
      <guid>https://ozzyczech.github.io/nabito.net/wordpress/wordpress-register-and-setup-witgets-from-php-code/</guid>
      <description>

&lt;h1 id=&#34;wordpress-register-and-setup-witgets-from-php-code&#34;&gt;Wordpress: register and setup witgets from PHP code&lt;/h1&gt;

&lt;p&gt;PHP driven registration of the #Widgets in #Wordpress can be quite confusing. There is my way how to handle it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Widgets {

 private $widgets = array();
 private $options = array();

 public function __construct() {
  $this-&amp;gt;options = wp_get_sidebars_widgets();
 }

 public function unregisterAllWidgets() {
  foreach ($this-&amp;gt;options as $name =&amp;gt; $values)
   $this-&amp;gt;options[$name] = array();
 }

 public function cleanWidgetSettings($type, $multi = null) {
  $this-&amp;gt;widgets[$type] = array();
  if ($multi !== null) $this-&amp;gt;widgets[$type][&#39;_multiwidget&#39;] = (int)(bool)$multi;
 }

 public function setMultiWidget($type, $val = 1) {
  $this-&amp;gt;widgets[$type][&#39;_multiwidget&#39;] = $val;
 }

 public function add($type, array $options, $area = null) {
  $this-&amp;gt;widgets[$type][] = $options;
  if ($area !== null) {
   if (array_key_exists($area, $this-&amp;gt;options) === false) {
    throw new Exception(&#39;Widget area &#39; . $area . &#39; not exists.&#39;);
   }
   end($this-&amp;gt;widgets[$type]);
   $this-&amp;gt;options[$area][] = $type . &#39;-&#39; . key($this-&amp;gt;widgets[$type]);
  }
 }

 public function __destruct() {
  foreach ($this-&amp;gt;widgets as $name =&amp;gt; $settings) {
   if (!array_key_exists(&#39;_multiwidget&#39;, $settings)) $settings[&#39;_multiwidget&#39;] = 1;
   update_option(&#39;widget_&#39; . $name, $settings);
  }
  wp_set_sidebars_widgets($this-&amp;gt;options);
 }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Following code is an example how to use &lt;code&gt;class Witgets&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$widgets = new Widgets();
$widgets-&amp;gt;unregisterAllWidgets();

$widgets-&amp;gt;add(
 &#39;text&#39;,
 array(
  &#39;title&#39; =&amp;gt; &#39;About us&#39;,
  &#39;text&#39; =&amp;gt; &#39;Simple text about us&#39;,
  &#39;filter&#39; =&amp;gt; true,
  &#39;classes&#39; =&amp;gt; &#39;&#39;,
  &#39;ids&#39; =&amp;gt; null,
 ),
 &#39;footer-1&#39;
);

// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code need to be call only once. Put your code to &lt;code&gt;function.php&lt;/code&gt; to &lt;code&gt;after_switch_theme&lt;/code&gt; action:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;add_action(
 &#39;after_switch_theme&#39;, function () {
  $widgets = new Widgets();
  $widgets-&amp;gt;unregisterAllWidgets();
  // ...
 }
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/4663766/&#34;&gt;https://gist.github.com/4663766/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>