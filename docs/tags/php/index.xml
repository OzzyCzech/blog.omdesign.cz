<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Php on blog.omdesign.cz</title>
    <link>http://blog.omdesign.cz/tags/php/</link>
    <description>Recent content in Php on blog.omdesign.cz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cs-cz</language>
    <managingEditor>ozana@omdesign.cz (Roman Ožana)</managingEditor>
    <webMaster>ozana@omdesign.cz (Roman Ožana)</webMaster>
    <lastBuildDate>Sat, 18 Oct 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://blog.omdesign.cz/tags/php/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to switch Homebrew formulas to older version</title>
      <link>http://blog.omdesign.cz/how-to-switch-homebrew-formulas-to-older-version/</link>
      <pubDate>Sat, 18 Oct 2014 00:00:00 +0000</pubDate>
      <author>ozana@omdesign.cz (Roman Ožana)</author>
      <guid>http://blog.omdesign.cz/how-to-switch-homebrew-formulas-to-older-version/</guid>
      <description>

&lt;h1 id=&#34;how-to-switch-homebrew-formulas-to-older-version&#34;&gt;How to switch Homebrew formulas to older version&lt;/h1&gt;

&lt;p&gt;Sometimes you just won’t be able install latest version of any program and need
some older (e.g. PHP 5.6.1 won’t work and you need install at least 5.6.0 and
getting your work done). As you know all brew formulas are GIT repos, you
can swith to older version easly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /usr/local/Library/Taps/homebrew/homebrew-php/Formula
$ git log --pretty=&amp;quot;%h - %s&amp;quot; -10
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;71b2069 - Update to PHP 5.5.18
b8aeb54 - Use homebrew&#39;s openssl for IMAP
f0d721a - php56: improve phpdbg logic
0dc3f1c - Update to PHP 5.6.1
908fedd - Update to Blitz 0.8.12
4801697 - Updates formula for WP CLI  to version 0.17.0
00560f3 - Upgrade php*-swoole to 1.7.5
8cbd369 - Updated PHP_CodeSniffer
a81eba6 - update pecl_http to 2.1.2
6a88856 - Add HEAD url for composer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then just switch&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git checkout 908fedd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then run &lt;code&gt;brew install php56&lt;/code&gt; and older version PHP will be installed. Procedure can be used for any formulas.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hardcore Simple Events Dispatcher for PHP</title>
      <link>http://blog.omdesign.cz/hardcore-simple-events-dispatcher-for-php/</link>
      <pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate>
      <author>ozana@omdesign.cz (Roman Ožana)</author>
      <guid>http://blog.omdesign.cz/hardcore-simple-events-dispatcher-for-php/</guid>
      <description>

&lt;h1 id=&#34;hardcore-simple-events-dispatcher-for-php&#34;&gt;Hardcore Simple Events Dispatcher for PHP&lt;/h1&gt;

&lt;p&gt;Events is simple pure functional &lt;strong&gt;event dispatching library&lt;/strong&gt; for PHP 5.5+ and
have nice and clear interface with function &lt;code&gt;on()&lt;/code&gt;, &lt;code&gt;one()&lt;/code&gt;, &lt;code&gt;off()&lt;/code&gt;, &lt;code&gt;trigger()&lt;/code&gt;,
&lt;code&gt;filter()&lt;/code&gt;, &lt;code&gt;ensure()&lt;/code&gt;, &lt;code&gt;listeners()&lt;/code&gt;, &lt;code&gt;events()&lt;/code&gt; - that&amp;rsquo;s all!&lt;/p&gt;

&lt;p&gt;With &lt;strong&gt;sphido/events&lt;/strong&gt; can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;listeners prioritization&lt;/li&gt;
&lt;li&gt;add/remove listeners&lt;/li&gt;
&lt;li&gt;filter values by functions&lt;/li&gt;
&lt;li&gt;stop propagation in function chain&lt;/li&gt;
&lt;li&gt;and have event default handler&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;trigger-event&#34;&gt;Trigger event&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;on(&#39;event&#39;, function () {
  echo &amp;quot;wow it&#39;s works yeah!&amp;quot;;
});

trigger(&#39;event&#39;); // print wow it&#39;s works yeah!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hardcore simple events for PHP with filter, prioritizing, removing handlers and
stop propagation. It&amp;rsquo;s even simpler then my previous version &lt;a href=&#34;https://github.com/sphido/events&#34;&gt;https://github.com/sphido/events&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting GitHub latest release URL</title>
      <link>http://blog.omdesign.cz/getting-github-latest-release-url/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      <author>ozana@omdesign.cz (Roman Ožana)</author>
      <guid>http://blog.omdesign.cz/getting-github-latest-release-url/</guid>
      <description>

&lt;h1 id=&#34;getting-github-latest-release-url&#34;&gt;Getting GitHub latest release URL&lt;/h1&gt;

&lt;p&gt;Do you need &lt;strong&gt;Download Latest Version&lt;/strong&gt; button? Try follow PHP code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function getLatestTagUrl($repository, $default = &#39;master&#39;) {
    $file = @json_decode(@file_get_contents(&amp;quot;https://api.github.com/repos/$repository/tags&amp;quot;, false,
        stream_context_create([&#39;http&#39; =&amp;gt; [&#39;header&#39; =&amp;gt; &amp;quot;User-Agent: Vestibulum\r\n&amp;quot;]])
    ));
    return sprintf(&amp;quot;https://github.com/$repository/archive/%s.zip&amp;quot;, $file ? reset($file)-&amp;gt;name : $default);
}

echo getLatestTagUrl(&#39;OzzyCzech/vestibulum&#39;);
// will return https://github.com/OzzyCzech/vestibulum/archive/v0.2.1.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#php #github #tip&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to add all custom post type to main Wordpress archive.php</title>
      <link>http://blog.omdesign.cz/how-to-add-all-custom-post-type-to-main-wordpress-archive.php/</link>
      <pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate>
      <author>ozana@omdesign.cz (Roman Ožana)</author>
      <guid>http://blog.omdesign.cz/how-to-add-all-custom-post-type-to-main-wordpress-archive.php/</guid>
      <description>

&lt;h1 id=&#34;how-to-add-all-custom-post-type-to-main-wordpress-archive-php&#34;&gt;How to add all custom post type to main Wordpress archive.php&lt;/h1&gt;

&lt;p&gt;Default archive shows only &lt;code&gt;post&lt;/code&gt; type if you need show all post types just add follow code to &lt;code&gt;function.php&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;add_filter(
&#39;pre_get_posts&#39;, function ($query) {
        if (
            $query-&amp;gt;is_main_query() &amp;amp;&amp;amp;
            !is_admin() &amp;amp;&amp;amp;
            (is_category() || is_tag())
            &amp;amp;&amp;amp; empty($query-&amp;gt;query_vars[&#39;suppress_filters&#39;])
        ) {
            $posts = array_diff(
                get_post_types([&#39;public&#39; =&amp;gt; true]), [&#39;page&#39;, &#39;attachment&#39;, &#39;revision&#39;, &#39;forum&#39;, &#39;reply&#39;, &#39;topic&#39;] /* array of ignored types*/
            );
            $query-&amp;gt;set(
                &#39;post_type&#39;, $posts
            );
            return $query;
        }
    }
);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>How to protect your emails with PHP and Javascript</title>
      <link>http://blog.omdesign.cz/how-to-protect-your-emails-with-php-and-javascript/</link>
      <pubDate>Tue, 22 Apr 2014 00:00:00 +0000</pubDate>
      <author>ozana@omdesign.cz (Roman Ožana)</author>
      <guid>http://blog.omdesign.cz/how-to-protect-your-emails-with-php-and-javascript/</guid>
      <description>

&lt;h1 id=&#34;how-to-protect-your-emails-with-php-and-javascript&#34;&gt;How to protect your emails with PHP and Javascript&lt;/h1&gt;

&lt;p&gt;Working with or without javascript it&amp;rsquo;s combine two technique for email protection &lt;a href=&#34;http://en.wikipedia.org/wiki/ROT13&#34;&gt;ROT13&lt;/a&gt; and CSS&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function mail($email, $text = null) {
 return &#39;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;document.write(&amp;quot;&#39; .
 addslashes(
  str_rot13(
   &#39;&amp;lt;a href=&amp;quot;mailto:&#39; . $email . &#39;&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;&#39; . ($text ? : $email) . &#39;&amp;lt;/a&amp;gt;&#39;
  )
 ) . &#39;&amp;quot;.replace(/[a-zA-Z]/g,function(c){return String.fromCharCode((c&amp;lt;=&amp;quot;Z&amp;quot;?90:122)&amp;gt;=(c=c.charCodeAt(0)+13)?c:c-26);}));&amp;lt;/script&amp;gt;&#39; .
 &#39;&amp;lt;noscript&amp;gt;&amp;lt;span style=&amp;quot;unicode-bidi: bidi-override; direction: rtl;&amp;quot;&amp;gt;&#39; . strrev($email) . &#39;&amp;lt;/span&amp;gt;&amp;lt;/noscript&amp;gt;&#39;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sources: - &lt;a href=&#34;http://techblog.tilllate.com/2008/07/20/ten-methods-to-obfuscate-e-mail-addresses-compared/&#34;&gt; Nine ways to obfuscate e-mail addresses compared&lt;/a&gt;
- and &lt;a href=&#34;http://perishablepress.com/best-method-for-email-obfuscation/&#34;&gt;Best Method for Email Obfuscation?&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Convert JSON data to valid PHP code</title>
      <link>http://blog.omdesign.cz/convert-json-data-to-valid-php-code/</link>
      <pubDate>Sun, 19 Jan 2014 00:00:00 +0000</pubDate>
      <author>ozana@omdesign.cz (Roman Ožana)</author>
      <guid>http://blog.omdesign.cz/convert-json-data-to-valid-php-code/</guid>
      <description>

&lt;h1 id=&#34;convert-json-data-to-valid-php-code&#34;&gt;Convert JSON data to valid PHP code&lt;/h1&gt;

&lt;p&gt;Do you need &lt;strong&gt;convert JSON data to valid PHP&lt;/strong&gt; code without pain? I&amp;rsquo;ve got a short script for that! My simple solution used &lt;a href=&#34;http://www.php.net/manual/en/function.var-export.php&#34;&gt;var_export()&lt;/a&gt; function. This function generates almost valid, well formatted PHP code from usual JSON data. Invalidity of code can be fix with one regular expression, which replace &lt;code&gt;stdClass::__set_state/&lt;/code&gt; with &lt;code&gt;(object)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Take a closer look at example data. I have here &lt;a href=&#34;https://gist.github.com/Fluidbyte/2973986&#34;&gt;currency.json&lt;/a&gt; - PHP code should look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
 return array (
  &#39;USD&#39; =&amp;gt;
  (object)(array(
     &#39;symbol&#39; =&amp;gt; &#39;$&#39;,
     &#39;name&#39; =&amp;gt; &#39;US Dollar&#39;,
     &#39;symbol_native&#39; =&amp;gt; &#39;$&#39;,
     &#39;decimal_digits&#39; =&amp;gt; 2,
     &#39;rounding&#39; =&amp;gt; 0,
     &#39;code&#39; =&amp;gt; &#39;USD&#39;,
     &#39;name&#39; =&amp;gt; &#39;US dollars&#39;,
  )),
  &#39;CAD&#39; =&amp;gt;
  //...
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s can be done in only four lines of PHP code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$data = json_decode(file_get_contents(__DIR__ . &#39;/currency.json&#39;));
$code = var_export((array)$data, true);
$code = &amp;quot;&amp;lt;?php\n return &amp;quot; . preg_replace(&#39;/stdClass::__set_state/&#39;, &#39;(object)&#39;, $code) . &#39;;&#39;;
file_put_contents(__DIR__ . &#39;/currencies.locale.php&#39;, $code);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you need call some function (like &lt;a href=&#34;http://www.php.net/manual/en/book.gettext.php&#34;&gt;gettext&lt;/a&gt;) above the variable, just add more regular expression:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$data = json_decode(file_get_contents(__DIR__ . &#39;/currency.json&#39;));
$code = var_export((array)$data, true);

// add gettext function call
$code = preg_replace(&amp;quot;/&#39;name&#39; =&amp;gt; &#39;(.+)&#39;/&amp;quot;, &amp;quot;&#39;name&#39; =&amp;gt; __(&#39;$1&#39;)&amp;quot;, $code);
$code = preg_replace(&amp;quot;/&#39;name_plural&#39; =&amp;gt; &#39;(.+)&#39;/&amp;quot;, &amp;quot;&#39;name&#39; =&amp;gt; __(&#39;$1&#39;)&amp;quot;, $code);

// save PHP code
$code = &amp;quot;&amp;lt;?php\n return &amp;quot; . preg_replace(&#39;/stdClass::__set_state/&#39;, &#39;(object)&#39;, $code) . &#39;;&#39;;
file_put_contents(__DIR__ . &#39;/currencies.locale.php&#39;, $code);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to safely commit vendor dir with php Composer</title>
      <link>http://blog.omdesign.cz/how-to-safely-commit-vendor-dir-with-php-composer/</link>
      <pubDate>Wed, 24 Jul 2013 00:00:00 +0000</pubDate>
      <author>ozana@omdesign.cz (Roman Ožana)</author>
      <guid>http://blog.omdesign.cz/how-to-safely-commit-vendor-dir-with-php-composer/</guid>
      <description>

&lt;h1 id=&#34;how-to-safely-commit-vendor-dir-with-php-composer&#34;&gt;How to safely commit vendor dir with php Composer&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://getcomposer.org/&#34;&gt;Composer&lt;/a&gt; is great tool, but sometimes you will need avoid all external dependencies. Sometimes you will need have all source codes in your git repository. Should I &lt;a href=&#34;http://getcomposer.org/doc/faqs/should-i-commit-the-dependencies-in-my-vendor-directory.md&#34;&gt; commit the dependencies&lt;/a&gt; in my vendor directory, and still have all benefits of using Composer? Here are my requirements: - Everything need to be automatically.
- I will work on application and my packages together.
- I need a simple way how to commit and publish new version of packages.
- Workflow need to be simple (mimimum of commands)&lt;/p&gt;

&lt;h3 id=&#34;how-to-commit-vendor-dir&#34;&gt;How to commit vendor dir?&lt;/h3&gt;

&lt;p&gt;Remove &lt;code&gt;vendor&lt;/code&gt; dir from your &lt;code&gt;.gitignore&lt;/code&gt; and add follow lines to root of &lt;code&gt;composer.json&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;scripts&amp;quot;: {
 &amp;quot;post-update-cmd&amp;quot;: [&amp;quot;echo [WARNING] Delete all .git dirs&amp;quot;, &amp;quot;rm -rf vendor/**/**/.git&amp;quot;],
 &amp;quot;post-install-cmd&amp;quot;: [&amp;quot;echo [WARNING] Delete all .git dirs&amp;quot;, &amp;quot;rm -rf vendor/**/**/.git&amp;quot;]
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s automatically remove the &lt;code&gt;.git&lt;/code&gt; directory of every dependency after the installation or update. You can safely commit everything to your git repo and avoid mistakes with fake git &amp;ldquo;submodules&amp;rdquo;. Run: &lt;code&gt;composer update&lt;/code&gt; and commit everything to your repo. ### How make changes in packages?&lt;/p&gt;

&lt;p&gt;When you are using tagged releases (no dev versions) of package then run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rm -rf vendor/some/package &amp;amp;&amp;amp; composer update some/package --prefer-source --no-scripts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For dev versions (dev-master) it&amp;rsquo;s simpler:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rm -rf vendor/some/package &amp;amp;&amp;amp; composer update some/package --no-scripts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, when you go to vendor/some/package dir it&amp;rsquo;s common git repository - you can make changes, commit and publish new versions of package. But don&amp;rsquo;t forgot run &lt;code&gt;composer update&lt;/code&gt; before commit main repo, becouse there is still .git dir in package! ### Disadvantages&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Large VCS repository size and diffs when you update code.&lt;/li&gt;
&lt;li&gt;Duplication of the history of all your dependencies in your own VCS.&lt;/li&gt;
&lt;li&gt;There can be conflicts in commits especially when you work in larger team.&lt;/li&gt;
&lt;li&gt;Still &lt;strong&gt;not avoid commit .git directory&lt;/strong&gt; after running composer with &lt;code&gt;--no-scripts&lt;/code&gt; param.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Setup email sending from PHP on Mac</title>
      <link>http://blog.omdesign.cz/setup-email-sending-from-php-on-mac/</link>
      <pubDate>Tue, 14 May 2013 00:00:00 +0000</pubDate>
      <author>ozana@omdesign.cz (Roman Ožana)</author>
      <guid>http://blog.omdesign.cz/setup-email-sending-from-php-on-mac/</guid>
      <description>

&lt;h1 id=&#34;setup-email-sending-from-php-on-mac&#34;&gt;Setup email sending from PHP on Mac&lt;/h1&gt;

&lt;p&gt;First write in terminal: &lt;code&gt;which sendmail&lt;/code&gt; wlll return path to sendmail app (in my case &lt;code&gt;/usr/sbin/sendmail&lt;/code&gt;). Then open &lt;code&gt;php.ini&lt;/code&gt; file and setup:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sendmail_path = /usr/sbin/sendmail -t -i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create necessary folder and setup postfix permissions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo mkdir -p /Library/Server/Mail/Data/spool
sudo /usr/sbin/postfix set-permissions
sudo /usr/sbin/postfix start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And check if emails will come:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;php -r &amp;quot;mail(&#39;youremail@domain.com&#39;, &#39;subject&#39;, &#39;message&#39;, &#39;From: &amp;lt;youremail@domain.com&amp;gt;&#39; . PHP_EOL);&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Make WordPress globals more accessible</title>
      <link>http://blog.omdesign.cz/wordpress/make-wordpress-globals-more-accessible/</link>
      <pubDate>Fri, 08 Feb 2013 00:00:00 +0000</pubDate>
      <author>ozana@omdesign.cz (Roman Ožana)</author>
      <guid>http://blog.omdesign.cz/wordpress/make-wordpress-globals-more-accessible/</guid>
      <description>

&lt;h1 id=&#34;make-wordpress-globals-more-accessible&#34;&gt;Make WordPress globals more accessible&lt;/h1&gt;

&lt;p&gt;Wordpress using a lot &lt;a href=&#34;http://codex.wordpress.org/Global_Variables&#34;&gt;globals variables&lt;/a&gt;. These variables are used throughout WordPress code for various reasons. Great example is database connection object &lt;a href=&#34;http://codex.wordpress.org/Class_Reference/wpdb&#34;&gt;wpdb&lt;/a&gt;. Here is common example how to use &lt;strong&gt;wpdb&lt;/strong&gt; in some function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function something() {
  global $wpdb;
  /** @var wpdb $wpdb */
  $wpdb-&amp;gt;query(&#39;SQL...&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s highly uncomfortable and long! Therefore, I have prepared a simple object which make all global variables much more accesible from anywhere: &lt;a href=&#34;https://gist.github.com/OzzyCzech/4737518&#34;&gt;https://gist.github.com/OzzyCzech/4737518&lt;/a&gt; (PHP 5.3+ only)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function something() {
  Globals::wpdb()-&amp;gt;query(&#39;SQL...&#39;);
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Wordpress - register and setup widgets from PHP code</title>
      <link>http://blog.omdesign.cz/wordpress/wordpress-register-and-setup-witgets-from-php-code/</link>
      <pubDate>Tue, 29 Jan 2013 00:00:00 +0000</pubDate>
      <author>ozana@omdesign.cz (Roman Ožana)</author>
      <guid>http://blog.omdesign.cz/wordpress/wordpress-register-and-setup-witgets-from-php-code/</guid>
      <description>

&lt;h1 id=&#34;wordpress-register-and-setup-witgets-from-php-code&#34;&gt;Wordpress: register and setup witgets from PHP code&lt;/h1&gt;

&lt;p&gt;PHP driven registration of the #Widgets in #Wordpress can be quite confusing. There is my way how to handle it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Widgets {

 private $widgets = array();
 private $options = array();

 public function __construct() {
  $this-&amp;gt;options = wp_get_sidebars_widgets();
 }

 public function unregisterAllWidgets() {
  foreach ($this-&amp;gt;options as $name =&amp;gt; $values)
   $this-&amp;gt;options[$name] = array();
 }

 public function cleanWidgetSettings($type, $multi = null) {
  $this-&amp;gt;widgets[$type] = array();
  if ($multi !== null) $this-&amp;gt;widgets[$type][&#39;_multiwidget&#39;] = (int)(bool)$multi;
 }

 public function setMultiWidget($type, $val = 1) {
  $this-&amp;gt;widgets[$type][&#39;_multiwidget&#39;] = $val;
 }

 public function add($type, array $options, $area = null) {
  $this-&amp;gt;widgets[$type][] = $options;
  if ($area !== null) {
   if (array_key_exists($area, $this-&amp;gt;options) === false) {
    throw new Exception(&#39;Widget area &#39; . $area . &#39; not exists.&#39;);
   }
   end($this-&amp;gt;widgets[$type]);
   $this-&amp;gt;options[$area][] = $type . &#39;-&#39; . key($this-&amp;gt;widgets[$type]);
  }
 }

 public function __destruct() {
  foreach ($this-&amp;gt;widgets as $name =&amp;gt; $settings) {
   if (!array_key_exists(&#39;_multiwidget&#39;, $settings)) $settings[&#39;_multiwidget&#39;] = 1;
   update_option(&#39;widget_&#39; . $name, $settings);
  }
  wp_set_sidebars_widgets($this-&amp;gt;options);
 }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Following code is an example how to use &lt;code&gt;class Witgets&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$widgets = new Widgets();
$widgets-&amp;gt;unregisterAllWidgets();

$widgets-&amp;gt;add(
 &#39;text&#39;,
 array(
  &#39;title&#39; =&amp;gt; &#39;About us&#39;,
  &#39;text&#39; =&amp;gt; &#39;Simple text about us&#39;,
  &#39;filter&#39; =&amp;gt; true,
  &#39;classes&#39; =&amp;gt; &#39;&#39;,
  &#39;ids&#39; =&amp;gt; null,
 ),
 &#39;footer-1&#39;
);

// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code need to be call only once. Put your code to &lt;code&gt;function.php&lt;/code&gt; to &lt;code&gt;after_switch_theme&lt;/code&gt; action:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;add_action(
 &#39;after_switch_theme&#39;, function () {
  $widgets = new Widgets();
  $widgets-&amp;gt;unregisterAllWidgets();
  // ...
 }
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/4663766/&#34;&gt;https://gist.github.com/4663766/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WYSIWYG pro popis uživatele ve Wordpress</title>
      <link>http://blog.omdesign.cz/wysiwyg-pro-popis-u%C5%BEivatele-ve-wordpress/</link>
      <pubDate>Mon, 29 Oct 2012 00:00:00 +0000</pubDate>
      <author>ozana@omdesign.cz (Roman Ožana)</author>
      <guid>http://blog.omdesign.cz/wysiwyg-pro-popis-u%C5%BEivatele-ve-wordpress/</guid>
      <description>

&lt;h1 id=&#34;wysiwyg-pro-popis-uživatele-ve-wordpress&#34;&gt;WYSIWYG pro popis uživatele ve Wordpress&lt;/h1&gt;

&lt;p&gt;Následující kratičký kód zobrazí #WYSIWYG editor u popisu autora u uživatelského profilu: Kód stačí přidat do &lt;code&gt;function.php&lt;/code&gt; ve vašem template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
/**
 * WYSIWYG pro uzivatelsky profil Wordpress
 *
 * @author Roman Ozana &amp;lt;ozana@omdesign.cz&amp;gt;
 */
class CustomUserProfile {

  /** @var array */
  private $tinymceOptions = array(
    &#39;teeny&#39; =&amp;gt; true,
    &#39;quicktags&#39; =&amp;gt; false,
    &#39;media_buttons&#39; =&amp;gt; false, &#39;textarea_rows&#39; =&amp;gt; 8,
    &#39;wpautop&#39; =&amp;gt; false,
    &#39;tinymce&#39; =&amp;gt; array(
      &#39;theme_advanced_buttons1&#39; =&amp;gt; &#39;p, bold, italic, ul, |,link,unlink,code&#39;,
      &#39;theme_advanced_buttons2&#39; =&amp;gt; &#39;&#39;,
      &#39;theme_advanced_buttons3&#39; =&amp;gt; &#39;&#39;,
      &#39;theme_advanced_buttons4&#39; =&amp;gt; &#39;&#39;,
    ),
  );

  public function __construct() {
    add_action(&#39;show_user_profile&#39;, array($this, &#39;initDescriptionWysywig&#39;));
    add_action(&#39;edit_user_profile&#39;, array($this, &#39;initDescriptionWysywig&#39;));
  }

  /**
   * Wysywig editor take pro description
   *
   * @param $options
   */
  public function initDescriptionWysywig($options) {
    if ( ! class_exists(&#39;_WP_Editors&#39; ) )
      require_once( ABSPATH . WPINC . &#39;/class-wp-editor.php&#39; );

    $options = _WP_Editors::parse_settings(&#39;description&#39;, $this-&amp;gt;tinymceOptions);
    _WP_Editors::editor_settings(&#39;description&#39;, $options);
    wp_print_styles(&#39;editor-buttons&#39;);
  }

}
new CustomUserProfile();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#wordpress #php&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hash tags pro Wordpress</title>
      <link>http://blog.omdesign.cz/wordpress/hash-tags-pro-wordpress/</link>
      <pubDate>Sat, 15 Sep 2012 00:00:00 +0000</pubDate>
      <author>ozana@omdesign.cz (Roman Ožana)</author>
      <guid>http://blog.omdesign.cz/wordpress/hash-tags-pro-wordpress/</guid>
      <description>

&lt;h1 id=&#34;hash-tags-pro-wordpress&#34;&gt;Hash tags pro Wordpress&lt;/h1&gt;

&lt;p&gt;Napsal jsem velmi jednoduchý plugin, který přidává do Wordpress podporu pro hash tagy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
/*
Plugin Name: Hashs
Description: Twitter like hash for Wordpress
Version: 1.0
Author: Roman Ozana &amp;lt;ozana@omdesign.cz&amp;gt;
Author URI: http://www.omdesign.cz/
*/
class Hashs {

  const PATTERN = &#39;/\B#([^\s\W#]+)/i&#39;;

  /**
   * @param string $content
   * @return string mixed
   */
  public static function processContent($content) {
    return preg_replace(Hashs::PATTERN, &#39;&amp;lt;a href=&amp;quot;&#39; . get_home_url(null, &#39;/tag/$1&#39;) . &#39;&amp;quot; class=&amp;quot;tag&amp;quot;&amp;gt;#$1&amp;lt;/a&amp;gt; &#39;, $content);
  }

  /**
   * Auto hash tags
   *
   * @param $post_id
   * @return bool
   */
  public static function addAutoTags($post_id) {
    $post = get_post($post_id);
    preg_match_all(Hashs::PATTERN, $post-&amp;gt;post_content, $matches);
    if (!isset($matches[1])) return;
    wp_set_object_terms($post_id, $matches[1], &#39;post_tag&#39;, false); // replace
  }
}

add_filter(&#39;the_content&#39;, array(&#39;Hashs&#39;, &#39;processContent&#39;), 1);
add_action(&#39;save_post&#39;, array(&#39;Hashs&#39;, &#39;addAutoTags&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Povšimněte si zejména řádku  &lt;code&gt;wp_set_object_terms($post_id, $matches[1], &#39;post_tag&#39;, false);&lt;/code&gt;
ten totiž ukládá nalezené tagy k postu. Pokud je poslední hodnota &lt;code&gt;true&lt;/code&gt;,
provede append (přidání ke stávajícím tagům). Pokud je &lt;code&gt;false&lt;/code&gt;, provede
nahrazení všech tagů u postu nalezenými hashtagy.&lt;/p&gt;

&lt;p&gt;Zdrojový kód ke stažení zde: &lt;a href=&#34;https://bitbucket.org/OzzyCzech/omhashtag&#34;&gt;https://bitbucket.org/OzzyCzech/omhashtag&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Zjištění práv k souboru nebo adresáři v PHP</title>
      <link>http://blog.omdesign.cz/zji%C5%A1t%C4%9Bn%C3%AD-pr%C3%A1v-k-souboru-nebo-adres%C3%A1%C5%99i-v-php/</link>
      <pubDate>Wed, 05 Sep 2012 00:00:00 +0000</pubDate>
      <author>ozana@omdesign.cz (Roman Ožana)</author>
      <guid>http://blog.omdesign.cz/zji%C5%A1t%C4%9Bn%C3%AD-pr%C3%A1v-k-souboru-nebo-adres%C3%A1%C5%99i-v-php/</guid>
      <description>

&lt;h1 id=&#34;zjištění-práv-k-souboru-nebo-adresáři-v-php&#34;&gt;Zjištění práv k souboru nebo adresáři v PHP&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;function getPermisions($file) {
  return (is_dir($file) || is_file($file)) ? substr(decoct(fileperms($path)), -4) : &#39;0000&#39;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nebo pro kontrolu, zda jsou práva dostatečná:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function hasPermisions($path, $permission = 777) {
  $current = substr(decoct(fileperms($path)), $permission &amp;gt; 1000 ? -4 : -3);
  return ($current &amp;gt; $permission);
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Jak okopírovat adresář s celým obsahem v PHP</title>
      <link>http://blog.omdesign.cz/jak-okop%C3%ADrovat-adres%C3%A1%C5%99-s-cel%C3%BDm-obsahem-v-php/</link>
      <pubDate>Sat, 15 Oct 2011 00:00:00 +0000</pubDate>
      <author>ozana@omdesign.cz (Roman Ožana)</author>
      <guid>http://blog.omdesign.cz/jak-okop%C3%ADrovat-adres%C3%A1%C5%99-s-cel%C3%BDm-obsahem-v-php/</guid>
      <description>

&lt;h1 id=&#34;jak-okopírovat-adresář-s-celým-obsahem-v-php&#34;&gt;Jak okopírovat adresář s celým obsahem v PHP&lt;/h1&gt;

&lt;p&gt;Složitých a ošklivých funkcí pro kopírování adresářů a podadresářů vč. jejich obsahu jsem viděl několik. Tahle celkem běžná úloha jde vyřešit i jednoduše pomocí &lt;a href=&#34;http://cz.php.net/manual/en/spl.iterators.php&#34;&gt;PHP iterátoru&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$source = &amp;quot;/foo/bar/dir&amp;quot;;
$dest= &amp;quot;/dest/dir&amp;quot;;

foreach (
 $iterator = new RecursiveIteratorIterator(
  new RecursiveDirectoryIterator($source, RecursiveDirectoryIterator::SKIP_DOTS),
  RecursiveIteratorIterator::SELF_FIRST) as $item
) {
  if ($item-&amp;gt;isDir()) {
    mkdir($dest . DIRECTORY_SEPARATOR . $iterator-&amp;gt;getSubPathName());
  } else {
    copy($item, $dest . DIRECTORY_SEPARATOR . $iterator-&amp;gt;getSubPathName());
  }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Výpočet hash objektu v PHP</title>
      <link>http://blog.omdesign.cz/v%C3%BDpo%C4%8Det-hash-objektu-v-php/</link>
      <pubDate>Sun, 25 Sep 2011 00:00:00 +0000</pubDate>
      <author>ozana@omdesign.cz (Roman Ožana)</author>
      <guid>http://blog.omdesign.cz/v%C3%BDpo%C4%8Det-hash-objektu-v-php/</guid>
      <description>

&lt;h1 id=&#34;výpočet-hash-objektu-v-php&#34;&gt;Výpočet hash objektu v PHP&lt;/h1&gt;

&lt;p&gt;Funkce &lt;a href=&#34;http://php.net/manual/en/function.spl-object-hash.php&#34;&gt;spl_object_hash()&lt;/a&gt;
má jednu &lt;strong&gt;nevýhodu&lt;/strong&gt;, její výsledek se v čase mění. Pokud objekt naplníte
stejnými hodnotami, dostanete při dvou requestech dva různé výsledky. Což nemusí
být vždy žádoucí. Někdy potřebujete objekt identifikovat na základě jeho
vnitřních hodnot pomocí neměnného řetězce. Takový hash můžete snadno získat
například takto:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Foo {
 private $p;
 public function setProperty($p) {
  $this-&amp;gt;p = $p;
 }
 // vypocita hash objektu na zaklade hodnot jeho propert
 public function __toString() {
  return md5(http_build_query(get_object_vars($this)));
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pro vypsání/získání hash pak stačí:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$bar = new Foo();
$bar-&amp;gt;setProperty(&#39;25&#39;);
echo $bar;
$hash = (string) $bar;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>